package hr.pfs.graphics;

import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;

import hr.pfs.graphics.MapPixel;

public class Map {

	private int mapWidth;
	private int mapHeight;
	private MapPixel[] pixels;

	public Map (String mapName) {
		//Print message
		System.out.println("Loading map: "+mapName);
		printMemory();

		load(mapName);

		System.out.println("Loaded.");
		printMemory();
	}

	private void load (String mapName) {
		//Images
		BufferedImage bottomImage;
		BufferedImage topImage;
		BufferedImage dataImage;

		//Paths
		String bottomPath = "/maps/"+mapName+"_bottom.png";
		String topPath = "/maps/"+mapName+"_top.png";
		String dataPath = "/maps/"+mapName+"_data.png";

		try {

			//Load map layers
			bottomImage = ImageIO.read(getClass().getResource(bottomPath)); 
			topImage = ImageIO.read(getClass().getResource(topPath));
			dataImage = ImageIO.read(getClass().getResource(dataPath));

			mapWidth = bottomImage.getWidth();
			mapHeight = bottomImage.getHeight();

			int[] bottomLayer;
			bottomLayer = new int[mapWidth*mapHeight];
			bottomImage.getRGB(0,0,mapWidth,mapHeight,bottomLayer,0,mapWidth);

			int[] topLayer;
			topLayer = new int[mapWidth*mapHeight];
			topImage.getRGB(0,0,mapWidth,mapHeight,topLayer,0,mapWidth);

			int[] dataLayer;
			dataLayer= new int[mapWidth*mapHeight];
			dataImage.getRGB(0,0,mapWidth,mapHeight,dataLayer,0,mapWidth);

			pixels = new MapPixel [mapWidth*mapHeight];
			for (int i=0; i<mapWidth*mapHeight; i++) {
				pixels [i] = new MapPixel(bottomLayer[i], topLayer[i], dataLayer[i]);
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void printMemory() {
		//Getting the runtime reference from system
		Runtime runtime = Runtime.getRuntime();

		int mb = 1024*1024;

		System.out.println("");
		System.out.println("");

		System.out.println("##### Heap utilization statistics [MB] #####");

		//Print used memory
		System.out.println("Used Memory: "
				+ (runtime.totalMemory() - runtime.freeMemory()) / mb + " MB");

		//Print free memory
		System.out.println("Free Memory: "
				+ runtime.freeMemory() / mb + " MB");

		//Print total available memory
		System.out.println("Total Memory: " + runtime.totalMemory() / mb + " MB");

		//Print Maximum available memory
		System.out.println("Max Memory: " + runtime.maxMemory() / mb + " MB");

		System.out.println("");
		System.out.println("");

	}

	public int getMapWidth() {
		return mapWidth;
	}

	public int getMapHeight() {
		return mapHeight;
	}

	public MapPixel[] getPixels() {
		return pixels;
	}

}
